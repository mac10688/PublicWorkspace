#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.269
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrintPreview.DataBase
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class ContactDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definizioni metodo Extensibility
    partial void OnCreated();
    partial void InsertPERSON(PERSON instance);
    partial void UpdatePERSON(PERSON instance);
    partial void DeletePERSON(PERSON instance);
    partial void InsertJOB(JOB instance);
    partial void UpdateJOB(JOB instance);
    partial void DeleteJOB(JOB instance);
    #endregion
		
		public ContactDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PERSON> PERSON
		{
			get
			{
				return this.GetTable<PERSON>();
			}
		}
		
		public System.Data.Linq.Table<JOB> JOB
		{
			get
			{
				return this.GetTable<JOB>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class PERSON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private string _SURNAME;
		
		private string _ADDRESS;
		
		private string _ZIPCODE;
		
		private string _CITY;
		
		private EntitySet<JOB> _JOB;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnSURNAMEChanging(string value);
    partial void OnSURNAMEChanged();
    partial void OnADDRESSChanging(string value);
    partial void OnADDRESSChanged();
    partial void OnZIPCODEChanging(string value);
    partial void OnZIPCODEChanged();
    partial void OnCITYChanging(string value);
    partial void OnCITYChanged();
    #endregion
		
		public PERSON()
		{
			this._JOB = new EntitySet<JOB>(new Action<JOB>(this.attach_JOB), new Action<JOB>(this.detach_JOB));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SURNAME")]
		public string SURNAME
		{
			get
			{
				return this._SURNAME;
			}
			set
			{
				if ((this._SURNAME != value))
				{
					this.OnSURNAMEChanging(value);
					this.SendPropertyChanging();
					this._SURNAME = value;
					this.SendPropertyChanged("SURNAME");
					this.OnSURNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDRESS")]
		public string ADDRESS
		{
			get
			{
				return this._ADDRESS;
			}
			set
			{
				if ((this._ADDRESS != value))
				{
					this.OnADDRESSChanging(value);
					this.SendPropertyChanging();
					this._ADDRESS = value;
					this.SendPropertyChanged("ADDRESS");
					this.OnADDRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIPCODE")]
		public string ZIPCODE
		{
			get
			{
				return this._ZIPCODE;
			}
			set
			{
				if ((this._ZIPCODE != value))
				{
					this.OnZIPCODEChanging(value);
					this.SendPropertyChanging();
					this._ZIPCODE = value;
					this.SendPropertyChanged("ZIPCODE");
					this.OnZIPCODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITY")]
		public string CITY
		{
			get
			{
				return this._CITY;
			}
			set
			{
				if ((this._CITY != value))
				{
					this.OnCITYChanging(value);
					this.SendPropertyChanging();
					this._CITY = value;
					this.SendPropertyChanged("CITY");
					this.OnCITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PERSON_JOB", Storage="_JOB", ThisKey="ID", OtherKey="IDPERSON")]
		public EntitySet<JOB> JOB
		{
			get
			{
				return this._JOB;
			}
			set
			{
				this._JOB.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JOB(JOB entity)
		{
			this.SendPropertyChanging();
			entity.PERSON = this;
		}
		
		private void detach_JOB(JOB entity)
		{
			this.SendPropertyChanging();
			entity.PERSON = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class JOB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _STATE;
		
		private string _ACTIVITY;
		
		private int _IDPERSON;
		
		private EntityRef<PERSON> _PERSON;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSTATEChanging(string value);
    partial void OnSTATEChanged();
    partial void OnACTIVITYChanging(string value);
    partial void OnACTIVITYChanged();
    partial void OnIDPERSONChanging(int value);
    partial void OnIDPERSONChanged();
    #endregion
		
		public JOB()
		{
			this._PERSON = default(EntityRef<PERSON>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATE")]
		public string STATE
		{
			get
			{
				return this._STATE;
			}
			set
			{
				if ((this._STATE != value))
				{
					this.OnSTATEChanging(value);
					this.SendPropertyChanging();
					this._STATE = value;
					this.SendPropertyChanged("STATE");
					this.OnSTATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTIVITY")]
		public string ACTIVITY
		{
			get
			{
				return this._ACTIVITY;
			}
			set
			{
				if ((this._ACTIVITY != value))
				{
					this.OnACTIVITYChanging(value);
					this.SendPropertyChanging();
					this._ACTIVITY = value;
					this.SendPropertyChanged("ACTIVITY");
					this.OnACTIVITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPERSON")]
		public int IDPERSON
		{
			get
			{
				return this._IDPERSON;
			}
			set
			{
				if ((this._IDPERSON != value))
				{
					if (this._PERSON.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPERSONChanging(value);
					this.SendPropertyChanging();
					this._IDPERSON = value;
					this.SendPropertyChanged("IDPERSON");
					this.OnIDPERSONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PERSON_JOB", Storage="_PERSON", ThisKey="IDPERSON", OtherKey="ID", IsForeignKey=true)]
		public PERSON PERSON
		{
			get
			{
				return this._PERSON.Entity;
			}
			set
			{
				PERSON previousValue = this._PERSON.Entity;
				if (((previousValue != value) 
							|| (this._PERSON.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PERSON.Entity = null;
						previousValue.JOB.Remove(this);
					}
					this._PERSON.Entity = value;
					if ((value != null))
					{
						value.JOB.Add(this);
						this._IDPERSON = value.ID;
					}
					else
					{
						this._IDPERSON = default(int);
					}
					this.SendPropertyChanged("PERSON");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
