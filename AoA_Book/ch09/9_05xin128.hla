program Xin128;

#include( "stdlib.hhf" );

// 128-bit unsigned integer data type:

type
    b128: dword[4];




procedure getb128( var inValue:b128 ); @nodisplay;
const
    HexChars  := {'0'..'9', 'a'..'f', 'A'..'F', '_'};
var
    Delimiters: cset;
    LocalValue: b128;
    
begin getb128;

    push( eax );
    push( ebx );
    
    // Get a copy of the HLA standard numeric input delimiters:
    
    conv.getDelimiters( Delimiters );
    
    // Initialize the numeric input value to zero:
    
    xor( eax, eax );
    mov( eax, LocalValue[0] );
    mov( eax, LocalValue[4] );
    mov( eax, LocalValue[8] );
    mov( eax, LocalValue[12] );
    
    // By default, #0 is a member of the HLA Delimiters
    // character set.  However, someone may have called
    // conv.setDelimiters and removed this character
    // from the internal Delimiters character set.  This
    // algorithm depends upon #0 being in the Delimiters
    // character set, so let's add that character in
    // at this point just to be sure.   
    
    cs.unionChar( #0, Delimiters );


    // If we're at the end of the current input
    // line (or the program has yet to read any input),
    // for the input of an actual character.
    
    if( stdin.peekc() = #0 ) then
    
        stdin.readLn();
        
    endif;
    


    // Skip the delimiters found on input.  This code is
    // somewhat convoluted because stdin.peekc does not
    // force the input of a new line of text if the current
    // input buffer is empty.  We have to force that input
    // ourselves in the event the input buffer is empty.
        
    while( stdin.peekc() in Delimiters ) do

        // If we're at the end of the line, read a new line
        // of text from the user; otherwise, remove the
        // delimiter character from the input stream.
        
        if( al = #0 ) then
        
            stdin.readLn(); // Force a new input line.
            
        else
        
            stdin.getc();   // Remove the delimiter from the input buffer.
            
        endif;
            
    endwhile;
    
    // Read the hexadecimal input characters and convert
    // them to the internal representation:
    
    while( stdin.peekc() in HexChars ) do
    
        // Actually read the character to remove it from the
        // input buffer.
        
        stdin.getc();
        
        // Ignore underscores, process everything else.
        
        if( al <> '_' ) then
        
            if( al in '0'..'9' ) then
            
                and( $f, al );  // '0'..'9' -> 0..9
                
            else
            
                and( $f, al );  // 'a'/'A'..'f'/'F' -> 1..6
                add( 9, al );   // 1..6 -> 10..15
                
            endif;
            
            // Conversion algorithm is the following:
            //
            // (1) LocalValue := LocalValue * 16.
            // (2) LocalValue := LocalValue + al
            //
            // Note that "* 16" is easily accomplished by
            // shifting LocalValue to the left four bits.
            //
            // Overflow occurs if the H.O. four bits of LocalValue
            // contain a non-zero value prior to this operation.
            
            // First, check for overflow:
            
            test( $F0, (type byte LocalValue[15]));
            if( @nz ) then
            
                raise( ex.ValueOutOfRange );
                
            endif;
            
            // Now multiply LocalValue by 16 and add in
            // the current hexadecimal digit (in EAX).
            
            mov( LocalValue[8], ebx );
            shld( 4, ebx, LocalValue[12] );
            mov( LocalValue[4], ebx );
            shld( 4, ebx, LocalValue[8] );
            mov( LocalValue[0], ebx );
            shld( 4, ebx, LocalValue[4] );
            shl( 4, ebx );
            add( eax, ebx );
            mov( ebx, LocalValue[0] );
            
        endif;
        
    endwhile;

    // Okay, we've encountered a non-hexadecimal character.
    // Let's make sure it's a valid delimiter character.
    // Raise the ex.ConversionError exception if it's invalid.
    
    if( al not in Delimiters ) then
    
        raise( ex.ConversionError );
        
    endif;
    
    // Okay, this conversion has been a success.  Let's store
    // away the converted value into the output parameter.
    
    mov( inValue, ebx );
    mov( LocalValue[0], eax );
    mov( eax, [ebx] );
    
    mov( LocalValue[4], eax );
    mov( eax, [ebx+4] );
    
    mov( LocalValue[8], eax );
    mov( eax, [ebx+8] );
    
    mov( LocalValue[12], eax );
    mov( eax, [ebx+12] );
    
    pop( ebx );
    pop( eax );
    
end getb128;



// Code to test the routines above:

static
    b1:b128;
        
begin Xin128;

    stdout.put( "Input a 128-bit hexadecimal value: " );
    getb128( b1 );
    stdout.put
    ( 
        "The value is: $",
        b1[12], '_',
        b1[8],  '_',
        b1[4],  '_',
        b1[0],
        nl
    );
    
end Xin128;
    
