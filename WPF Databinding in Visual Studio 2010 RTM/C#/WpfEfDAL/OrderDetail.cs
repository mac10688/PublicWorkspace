using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;

namespace WpfEfDAL
{
    partial class OrderDetail : IDataErrorInfo
    {

        public OrderDetail()
        {
            // Handle this event so that UI can be notified if the customer is changed
            this.ProductReference.AssociationChanged += new CollectionChangeEventHandler(Product_AssociationChanged);

            // set defaults
            this.Quantity = 1;
            this.AddError("Product", "Please select a product.");
        }


        private void Product_AssociationChanged(object sender, CollectionChangeEventArgs e)
        {
            if (e.Action == CollectionChangeAction.Remove)
                OnPropertyChanging("Product");
            else
            {
                if (e.Action == CollectionChangeAction.Add)
                    this.RemoveError("Product");

                OnPropertyChanged("Product");
            }
        }


        /// <summary>
        // This method is called in the Quantity property setter of the OrderDetail
        // partial class generated by the Entity Data Model designer.
        /// </summary>
        partial void OnQuantityChanged()
        {
            // Perform validation. 
            if (_Quantity <= 0)
                this.AddError("Quantity", "Please enter a quantity.");
            else
                this.RemoveError("Quantity");
        }

#region "IDataErrorInfo Members"
        private Dictionary<String, String> m_validationErrors = new Dictionary<String, String>();

        private void AddError(String columnName, String msg)
        {
            if (! m_validationErrors.ContainsKey(columnName))
                m_validationErrors.Add(columnName, msg);
        }

        private void RemoveError(String columnName)
        {
            if (m_validationErrors.ContainsKey(columnName))
                m_validationErrors.Remove(columnName);
        }

        public  Boolean HasErrors
        {
            get {
                return (m_validationErrors.Count > 0);
            }
        }

        public string Error
        {
            get {
                if (m_validationErrors.Count > 0)
                    return "Customer data is invalid";
                else
                    return null;
            }
        }

        public string this[string columnName]
        {
            get {
                if (m_validationErrors.ContainsKey(columnName))
                    return m_validationErrors[columnName].ToString();
                else
                    return null;
            }
        }
#endregion

    }
}
